/****************
 * This code was automatically generated by lwm2m_codegen.
 ****************/
package org.eclipse.leshan.client.demo;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Random;
import java.util.List;
import java.util.Arrays;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

import org.eclipse.leshan.client.servers.ServerIdentity;
import org.eclipse.leshan.client.resource.BaseInstanceEnabler;
import org.eclipse.leshan.core.model.ResourceModel.Type;
import org.eclipse.leshan.core.model.ObjectModel;
import org.eclipse.leshan.core.node.LwM2mResource;
import org.eclipse.leshan.core.request.argument.Arguments;
import org.eclipse.leshan.core.response.ExecuteResponse;
import org.eclipse.leshan.core.response.ReadResponse;
import org.eclipse.leshan.core.response.WriteResponse;
import org.eclipse.leshan.core.util.NamedThreadFactory;


import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JFrame;
import javax.swing.JComboBox;
import javax.swing.WindowConstants;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.EventQueue;

public class MarketplaceState extends BaseInstanceEnabler {
    static final int OBJECT_ID_MARKETPLACE_STATE = 33006;
    static final int OBJECT_ID = 33006;
    // Static values for resource items
    private static final int RES_MARKET_END_TIME = 30014;
    private static final int RES_MARKETPLACE_STATE = 30015;
    private static final List<Integer> supportedResources =
     Arrays.asList(
             RES_MARKET_END_TIME
           , RES_MARKETPLACE_STATE
           );
    // Variables storing current values.

    private long vMarketEndTime = 0;
   private JLabel glMarketEndTime;
   private JLabel gvMarketEndTime;
   private JTextField tfMarketEndTime;

  // Acquisition, Matching,Validation
    private String vMarketplaceState = "";
   private JLabel glMarketplaceState;
   private JLabel gvMarketplaceState;
   private JComboBox cbMarketplaceState;
   private String[] cbvMarketplaceState = { "Acquisition", "Matching", "Validation" };
   private JFrame guiFrame;

  public MarketplaceState() {
      //  Automatically generated GUI code.
    guiFrame = new JFrame();
    guiFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    guiFrame.setTitle("Marketplace State");

  // Market end time
    glMarketEndTime = new JLabel();
    glMarketEndTime.setText("Market end time");
    gvMarketEndTime = new JLabel();
    gvMarketEndTime.setText("");
    tfMarketEndTime = new JTextField();
    tfMarketEndTime.addActionListener(new java.awt.event.ActionListener() {
       public void actionPerformed(java.awt.event.ActionEvent evt) {
           String sValue = (String)tfMarketEndTime.getText();
           setMarketEndTime(Long.valueOf(sValue));
       }
     });

  // Marketplace state
    glMarketplaceState = new JLabel();
    glMarketplaceState.setText("Marketplace state");
    gvMarketplaceState = new JLabel();
    gvMarketplaceState.setText("");
    cbMarketplaceState = new JComboBox(cbvMarketplaceState);
    cbMarketplaceState.addActionListener(new java.awt.event.ActionListener() {
       public void actionPerformed(java.awt.event.ActionEvent evt) {
           String sValue = (String)cbMarketplaceState.getSelectedItem();
           setMarketplaceState(String.valueOf(sValue));
       }
     });

  // Create layout of labels, inputs and values.
   GridLayout layout = new GridLayout(0,3,10,10);
   guiFrame.getContentPane().setLayout(layout);
   Container guiPane = guiFrame.getContentPane();
   guiPane.add(glMarketEndTime);
   guiPane.add(tfMarketEndTime);
    guiPane.add(gvMarketEndTime);
   guiPane.add(glMarketplaceState);
   guiPane.add(cbMarketplaceState);
    guiPane.add(gvMarketplaceState);
  guiFrame.pack();
  // Code to make the frame visible.
  java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
         guiFrame.setVisible(true);
      }
    });
  }

  @Override
  public synchronized ReadResponse read(ServerIdentity identity, int resourceId) {
    switch (resourceId) {
    case RES_MARKET_END_TIME:
         return ReadResponse.success(resourceId, vMarketEndTime);
    case RES_MARKETPLACE_STATE:
         return ReadResponse.success(resourceId, vMarketplaceState);
    default:
      return super.read(identity, resourceId);
    }
  }

  @Override
  public WriteResponse write(ServerIdentity identity, boolean replace, int resourceId, LwM2mResource value) {
    switch (resourceId) {
    default:
      return super.write(identity, replace, resourceId,value);
    }
  }

  @Override
  public synchronized ExecuteResponse execute(ServerIdentity identity, int resourceId, Arguments arguments) {
    switch (resourceId) {
    default:
      return super.execute(identity, resourceId,arguments);
    }
  }

  @Override
  public List<Integer> getAvailableResourceIds(ObjectModel model) {
     return supportedResources;
  }

  private synchronized void setMarketEndTime(long value) {
    if (vMarketEndTime != value) {
       vMarketEndTime = value;
 gvMarketEndTime.setText(Long.toString(vMarketEndTime));
       fireResourceChange(RES_MARKET_END_TIME);
    }
  }

  private synchronized void setMarketplaceState(String value) {
    if (vMarketplaceState != value) {
       vMarketplaceState = value;
 gvMarketplaceState.setText(vMarketplaceState);
       fireResourceChange(RES_MARKETPLACE_STATE);
    }
  }

}
